{"version":3,"file":"static/js/458.e2956d18.chunk.js","mappings":"6JAMe,SAASA,IACtB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAe,IAAIC,OAC9CC,EAAMC,IAAWH,EAAAA,EAAAA,UAAiB,KAClCI,EAAUC,IAAeL,EAAAA,EAAAA,UAA0B,IACpDM,GAAWC,EAAAA,EAAAA,SAAO,GAsCxB,OAlBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAaC,QAAQ,aAEtC,GADAC,QAAQC,IAAI,qCAAsCJ,GAC9CA,EAAU,CACZ,MAAMK,EAAqBC,KAAKC,MAAMP,GACtCG,QAAQC,IAAI,eAAgBC,GAC5BT,EAAYS,EACd,IACC,KACHN,EAAAA,EAAAA,YAAU,KACJF,EAASW,QACXX,EAASW,SAAU,GAGrBP,aAAaQ,QAAQ,YAAaH,KAAKI,UAAUf,IACjDQ,QAAQC,IAAI,yBAA0BH,aAAaC,QAAQ,cAAa,GACvE,CAACP,KAGFgB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAME,SAvCcC,IACtBA,EAAMC,iBACDtB,EAAKuB,SACRpB,GAAYqB,GAAQ,IAAIA,EAAM,CAACxB,OAAMyB,QAAQ,MAC7CxB,EAAQ,IACT,EAkC+BkB,SAAA,EAC5BO,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,MAAO5B,EAAM6B,SAAWC,GAAM7B,EAAQ6B,EAAEC,OAAOH,UAClEF,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQR,SAAC,mBAExBD,EAAAA,EAAAA,MAAA,OAAKc,UAAU,aAAYb,SAAA,CAAC,uBACLvB,EAAUqC,qBAChC/B,EAASqB,OAASrB,EAASgC,KAAI,CAACC,EAAMC,KACrClB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEO,EAAAA,EAAAA,KAAA,SAAOC,KAAK,WAAWU,QAASF,EAAKV,OAAQI,SAAUA,IAxCzCO,KACpB,MAAME,EAAUpC,EAASgC,KAAI,CAACC,EAAMI,IAC9BA,IAAMH,EACA,IAAID,EAAMV,QAAQ,GAErBU,IAEThC,EAAYmC,EAAQ,EAiC+CE,CAAaJ,MAC1EV,EAAAA,EAAAA,KAAA,QAAMM,UAAWG,EAAKV,OAAS,QAAS,GAAGN,SAAEgB,EAAKnC,SAF1CoC,KAIR,2BAEHlC,EAASqB,QAASG,EAAAA,EAAAA,KAAA,UAAQe,QAASA,KAnCtCtC,EAAY,GAmCgD,EAAAgB,SAAC,oBAA0B,KAG3F,C","sources":["components/TodoApp.tsx"],"sourcesContent":["import {useEffect, useState, useRef} from 'react'\nimport './css/TodoApp.css';\ninterface taskData {\n  task: string,\n  isDone: boolean\n}\nexport default function TodoApp() {\n  const [todayDate, setTodayDate] = useState<Date>(new Date())\n  const [task, setTask] = useState<string>('')\n  const [taskList, setTaskList] = useState<Array<taskData>>([])\n  const firstRun = useRef(true)\n  const addTaskToList =  (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault()\n     if (task.length) {\n      setTaskList(prev => [...prev, {task, isDone: false}])\n      setTask('')\n     }\n  }\n  const markItAsDone = (index: number): void => {\n    const newList = taskList.map((item, i) => {\n      if (i === index) {\n         return {...item, isDone: true}\n      }\n      return item\n    })\n    setTaskList(newList)\n  }\n  const clearAllTasks = (): void =>{\n    setTaskList([])\n  }\n  useEffect(() => {\n    const taskData = localStorage.getItem('task-list')\n    console.log('Loaded from localStorage on mount:', taskData);\n    if (taskData) {\n      const parsed: taskData[] = JSON.parse(taskData);\n      console.log('Parsed data:', parsed);\n      setTaskList(parsed)\n    }\n  }, [])\n  useEffect(() => {\n    if (firstRun.current) {\n      firstRun.current = false\n      return\n    }\n    localStorage.setItem('task-list', JSON.stringify(taskList));\n    console.log('Saved to localStorage:', localStorage.getItem('task-list'));\n  }, [taskList])\n  \n  return (\n    <div>\n      <form onSubmit={addTaskToList}>\n        <input type=\"text\" value={task} onChange={(e) => setTask(e.target.value)}></input>\n        <button type=\"submit\">+ Add Task</button>\n      </form>\n      <div className=\"todo__list\">\n        Task List for Today {todayDate.toLocaleDateString()}\n      {taskList.length ? taskList.map((item, index) => (\n        <div key={index}>\n          <input type=\"checkbox\" checked={item.isDone} onChange={() => markItAsDone(index)}/>\n          <span className={item.isDone ? 'stike': ''}>{item.task}</span>\n        </div>\n      )): 'please add your tasks'}\n      </div>\n      {taskList.length ? <button onClick={() => clearAllTasks()}>Clear All Tasks</button>: ''}\n    </div>\n  )\n}\n"],"names":["TodoApp","todayDate","setTodayDate","useState","Date","task","setTask","taskList","setTaskList","firstRun","useRef","useEffect","taskData","localStorage","getItem","console","log","parsed","JSON","parse","current","setItem","stringify","_jsxs","children","onSubmit","event","preventDefault","length","prev","isDone","_jsx","type","value","onChange","e","target","className","toLocaleDateString","map","item","index","checked","newList","i","markItAsDone","onClick"],"sourceRoot":""}